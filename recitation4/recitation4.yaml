- init:
    run: make clean
    blocker: true

- build:
    run: make
    exit: 0
    blocker: true

- case1:
    run: ./bin/recitation4 cases/input_add.txt
    script:
        - expect: 'Enter a choice: {A,B,P,M,E}: '
        - send: 'B'
        - expect: 'Choose(.*?)an(.*?)operation(.*?)for(.*?)Binary(.*?)Search(.*?)Tree(.*?)BST(.*?)(\s+)'
        - expect: 'A(.*?)Insert(.*?)a(.*?)number(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'B(.*?)Read(.*?)numbers(.*?)from(.*?)a(.*?)file(.*?)and(.*?)add(.*?)them(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'C(.*?)Test(.*?)whether(.*?)the(.*?)BST(.*?)contains(.*?)a(.*?)number(\s+)'
        - expect: 'P(.*?)Print(.*?)the(.*?)node(.*?)structure(.*?)in(.*?)the(.*?)BST(.*?)with(.*?)PostOrder(.*?)search(\s+)'
        - expect: 'M(.*?)Find(.*?)the(.*?)BST(.*?)within(.*?)a(.*?)binary(.*?)tree(.*?)with(.*?)maximum(.*?)sum(.*?)value(\s+)'
        - expect: 'E(.*?)Exit(\s+)'
        - send: 'P'
        - expect: '5 3 7 12 9 6'
        - expect: 'Choose(.*?)an(.*?)operation(.*?)for(.*?)Binary(.*?)Search(.*?)Tree(.*?)BST(.*?)(\s+)'
        - expect: 'A(.*?)Insert(.*?)a(.*?)number(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'B(.*?)Read(.*?)numbers(.*?)from(.*?)a(.*?)file(.*?)and(.*?)add(.*?)them(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'C(.*?)Test(.*?)whether(.*?)the(.*?)BST(.*?)contains(.*?)a(.*?)number(\s+)'
        - expect: 'P(.*?)Print(.*?)the(.*?)node(.*?)structure(.*?)in(.*?)the(.*?)BST(.*?)with(.*?)PostOrder(.*?)search(\s+)'
        - expect: 'M(.*?)Find(.*?)the(.*?)BST(.*?)within(.*?)a(.*?)binary(.*?)tree(.*?)with(.*?)maximum(.*?)sum(.*?)value(\s+)'
        - expect: 'E(.*?)Exit(\s+)'
        - send: 'E'
        - expect: _EOF_ 
    exit: 0
    points: 2

- case2:
    run: ./bin/recitation4 cases/input_add.txt
    script:
        - expect: 'Enter a choice: {A,B,P,M,E}: '
        - send: 'B'
        - expect: 'Choose(.*?)an(.*?)operation(.*?)for(.*?)Binary(.*?)Search(.*?)Tree(.*?)BST(.*?)(\s+)'
        - expect: 'A(.*?)Insert(.*?)a(.*?)number(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'B(.*?)Read(.*?)numbers(.*?)from(.*?)a(.*?)file(.*?)and(.*?)add(.*?)them(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'C(.*?)Test(.*?)whether(.*?)the(.*?)BST(.*?)contains(.*?)a(.*?)number(\s+)'
        - expect: 'P(.*?)Print(.*?)the(.*?)node(.*?)structure(.*?)in(.*?)the(.*?)BST(.*?)with(.*?)PostOrder(.*?)search(\s+)'
        - expect: 'M(.*?)Find(.*?)the(.*?)BST(.*?)within(.*?)a(.*?)binary(.*?)tree(.*?)with(.*?)maximum(.*?)sum(.*?)value(\s+)'
        - expect: 'E(.*?)Exit(\s+)'
        - send: 'C'
        - send: '3'
        - expect: 'BST(.*?)contains(.*?)digit(.*?)3(.*?)true(\s+)'
        - expect: 'Choose(.*?)an(.*?)operation(.*?)for(.*?)Binary(.*?)Search(.*?)Tree(.*?)BST(.*?)(\s+)'
        - expect: 'A(.*?)Insert(.*?)a(.*?)number(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'B(.*?)Read(.*?)numbers(.*?)from(.*?)a(.*?)file(.*?)and(.*?)add(.*?)them(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'C(.*?)Test(.*?)whether(.*?)the(.*?)BST(.*?)contains(.*?)a(.*?)number(\s+)'
        - expect: 'P(.*?)Print(.*?)the(.*?)node(.*?)structure(.*?)in(.*?)the(.*?)BST(.*?)with(.*?)PostOrder(.*?)search(\s+)'
        - expect: 'M(.*?)Find(.*?)the(.*?)BST(.*?)within(.*?)a(.*?)binary(.*?)tree(.*?)with(.*?)maximum(.*?)sum(.*?)value(\s+)'
        - expect: 'E(.*?)Exit(\s+)'
        - send: 'C'
        - send: '15'
        - expect: 'BST(.*?)contains(.*?)digit(.*?)15(.*?)false(\s+)'
        - expect: 'Choose(.*?)an(.*?)operation(.*?)for(.*?)Binary(.*?)Search(.*?)Tree(.*?)BST(.*?)(\s+)'
        - expect: 'A(.*?)Insert(.*?)a(.*?)number(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'B(.*?)Read(.*?)numbers(.*?)from(.*?)a(.*?)file(.*?)and(.*?)add(.*?)them(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'C(.*?)Test(.*?)whether(.*?)the(.*?)BST(.*?)contains(.*?)a(.*?)number(\s+)'
        - expect: 'P(.*?)Print(.*?)the(.*?)node(.*?)structure(.*?)in(.*?)the(.*?)BST(.*?)with(.*?)PostOrder(.*?)search(\s+)'
        - expect: 'M(.*?)Find(.*?)the(.*?)BST(.*?)within(.*?)a(.*?)binary(.*?)tree(.*?)with(.*?)maximum(.*?)sum(.*?)value(\s+)'
        - expect: 'E(.*?)Exit(\s+)'
        - send: 'C'
        - send: '22'
        - expect: 'BST(.*?)contains(.*?)digit(.*?)22(.*?)false(\s+)'
        - expect: 'Choose(.*?)an(.*?)operation(.*?)for(.*?)Binary(.*?)Search(.*?)Tree(.*?)BST(.*?)(\s+)'
        - expect: 'A(.*?)Insert(.*?)a(.*?)number(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'B(.*?)Read(.*?)numbers(.*?)from(.*?)a(.*?)file(.*?)and(.*?)add(.*?)them(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'C(.*?)Test(.*?)whether(.*?)the(.*?)BST(.*?)contains(.*?)a(.*?)number(\s+)'
        - expect: 'P(.*?)Print(.*?)the(.*?)node(.*?)structure(.*?)in(.*?)the(.*?)BST(.*?)with(.*?)PostOrder(.*?)search(\s+)'
        - expect: 'M(.*?)Find(.*?)the(.*?)BST(.*?)within(.*?)a(.*?)binary(.*?)tree(.*?)with(.*?)maximum(.*?)sum(.*?)value(\s+)'
        - expect: 'E(.*?)Exit(\s+)'
        - send: 'C'
        - send: '12'
        - expect: 'BST(.*?)contains(.*?)digit(.*?)12(.*?)true(\s+)'
        - expect: 'Choose(.*?)an(.*?)operation(.*?)for(.*?)Binary(.*?)Search(.*?)Tree(.*?)BST(.*?)(\s+)'
        - expect: 'A(.*?)Insert(.*?)a(.*?)number(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'B(.*?)Read(.*?)numbers(.*?)from(.*?)a(.*?)file(.*?)and(.*?)add(.*?)them(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'C(.*?)Test(.*?)whether(.*?)the(.*?)BST(.*?)contains(.*?)a(.*?)number(\s+)'
        - expect: 'P(.*?)Print(.*?)the(.*?)node(.*?)structure(.*?)in(.*?)the(.*?)BST(.*?)with(.*?)PostOrder(.*?)search(\s+)'
        - expect: 'M(.*?)Find(.*?)the(.*?)BST(.*?)within(.*?)a(.*?)binary(.*?)tree(.*?)with(.*?)maximum(.*?)sum(.*?)value(\s+)'
        - expect: 'E(.*?)Exit(\s+)'
        - send: 'C'
        - send: '6'
        - expect: 'BST(.*?)contains(.*?)digit(.*?)6(.*?)true(\s+)'
        - expect: 'Choose(.*?)an(.*?)operation(.*?)for(.*?)Binary(.*?)Search(.*?)Tree(.*?)BST(.*?)(\s+)'
        - expect: 'A(.*?)Insert(.*?)a(.*?)number(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'B(.*?)Read(.*?)numbers(.*?)from(.*?)a(.*?)file(.*?)and(.*?)add(.*?)them(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'C(.*?)Test(.*?)whether(.*?)the(.*?)BST(.*?)contains(.*?)a(.*?)number(\s+)'
        - expect: 'P(.*?)Print(.*?)the(.*?)node(.*?)structure(.*?)in(.*?)the(.*?)BST(.*?)with(.*?)PostOrder(.*?)search(\s+)'
        - expect: 'M(.*?)Find(.*?)the(.*?)BST(.*?)within(.*?)a(.*?)binary(.*?)tree(.*?)with(.*?)maximum(.*?)sum(.*?)value(\s+)'
        - expect: 'E(.*?)Exit(\s+)'
        - send: 'C'
        - send: '7'
        - expect: 'BST(.*?)contains(.*?)digit(.*?)7(.*?)true(\s+)'
        - expect: 'Choose(.*?)an(.*?)operation(.*?)for(.*?)Binary(.*?)Search(.*?)Tree(.*?)BST(.*?)(\s+)'
        - expect: 'A(.*?)Insert(.*?)a(.*?)number(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'B(.*?)Read(.*?)numbers(.*?)from(.*?)a(.*?)file(.*?)and(.*?)add(.*?)them(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'C(.*?)Test(.*?)whether(.*?)the(.*?)BST(.*?)contains(.*?)a(.*?)number(\s+)'
        - expect: 'P(.*?)Print(.*?)the(.*?)node(.*?)structure(.*?)in(.*?)the(.*?)BST(.*?)with(.*?)PostOrder(.*?)search(\s+)'
        - expect: 'M(.*?)Find(.*?)the(.*?)BST(.*?)within(.*?)a(.*?)binary(.*?)tree(.*?)with(.*?)maximum(.*?)sum(.*?)value(\s+)'
        - expect: 'E(.*?)Exit(\s+)'
        - send: 'C'
        - send: '5'
        - expect: 'BST(.*?)contains(.*?)digit(.*?)5(.*?)true(\s+)'
        - expect: 'Choose(.*?)an(.*?)operation(.*?)for(.*?)Binary(.*?)Search(.*?)Tree(.*?)BST(.*?)(\s+)'
        - expect: 'A(.*?)Insert(.*?)a(.*?)number(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'B(.*?)Read(.*?)numbers(.*?)from(.*?)a(.*?)file(.*?)and(.*?)add(.*?)them(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'C(.*?)Test(.*?)whether(.*?)the(.*?)BST(.*?)contains(.*?)a(.*?)number(\s+)'
        - expect: 'P(.*?)Print(.*?)the(.*?)node(.*?)structure(.*?)in(.*?)the(.*?)BST(.*?)with(.*?)PostOrder(.*?)search(\s+)'
        - expect: 'M(.*?)Find(.*?)the(.*?)BST(.*?)within(.*?)a(.*?)binary(.*?)tree(.*?)with(.*?)maximum(.*?)sum(.*?)value(\s+)'
        - expect: 'E(.*?)Exit(\s+)'
        - send: 'C'
        - send: '9'
        - expect: 'BST(.*?)contains(.*?)digit(.*?)9(.*?)true(\s+)'
        - expect: 'Choose(.*?)an(.*?)operation(.*?)for(.*?)Binary(.*?)Search(.*?)Tree(.*?)BST(.*?)(\s+)'
        - expect: 'A(.*?)Insert(.*?)a(.*?)number(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'B(.*?)Read(.*?)numbers(.*?)from(.*?)a(.*?)file(.*?)and(.*?)add(.*?)them(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'C(.*?)Test(.*?)whether(.*?)the(.*?)BST(.*?)contains(.*?)a(.*?)number(\s+)'
        - expect: 'P(.*?)Print(.*?)the(.*?)node(.*?)structure(.*?)in(.*?)the(.*?)BST(.*?)with(.*?)PostOrder(.*?)search(\s+)'
        - expect: 'M(.*?)Find(.*?)the(.*?)BST(.*?)within(.*?)a(.*?)binary(.*?)tree(.*?)with(.*?)maximum(.*?)sum(.*?)value(\s+)'
        - expect: 'E(.*?)Exit(\s+)'
        - send: 'C'
        - send: '6'
        - expect: 'BST(.*?)contains(.*?)digit(.*?)6(.*?)true(\s+)'
        - expect: 'Choose(.*?)an(.*?)operation(.*?)for(.*?)Binary(.*?)Search(.*?)Tree(.*?)BST(.*?)(\s+)'
        - expect: 'A(.*?)Insert(.*?)a(.*?)number(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'B(.*?)Read(.*?)numbers(.*?)from(.*?)a(.*?)file(.*?)and(.*?)add(.*?)them(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'C(.*?)Test(.*?)whether(.*?)the(.*?)BST(.*?)contains(.*?)a(.*?)number(\s+)'
        - expect: 'P(.*?)Print(.*?)the(.*?)node(.*?)structure(.*?)in(.*?)the(.*?)BST(.*?)with(.*?)PostOrder(.*?)search(\s+)'
        - expect: 'M(.*?)Find(.*?)the(.*?)BST(.*?)within(.*?)a(.*?)binary(.*?)tree(.*?)with(.*?)maximum(.*?)sum(.*?)value(\s+)'
        - expect: 'E(.*?)Exit(\s+)'
        - send: 'C'
        - send: '6'
        - expect: 'BST(.*?)contains(.*?)digit(.*?)6(.*?)true(\s+)'
        - expect: 'Choose(.*?)an(.*?)operation(.*?)for(.*?)Binary(.*?)Search(.*?)Tree(.*?)BST(.*?)(\s+)'
        - expect: 'A(.*?)Insert(.*?)a(.*?)number(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'B(.*?)Read(.*?)numbers(.*?)from(.*?)a(.*?)file(.*?)and(.*?)add(.*?)them(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'C(.*?)Test(.*?)whether(.*?)the(.*?)BST(.*?)contains(.*?)a(.*?)number(\s+)'
        - expect: 'P(.*?)Print(.*?)the(.*?)node(.*?)structure(.*?)in(.*?)the(.*?)BST(.*?)with(.*?)PostOrder(.*?)search(\s+)'
        - expect: 'M(.*?)Find(.*?)the(.*?)BST(.*?)within(.*?)a(.*?)binary(.*?)tree(.*?)with(.*?)maximum(.*?)sum(.*?)value(\s+)'
        - expect: 'E(.*?)Exit(\s+)'
        - send: 'C'
        - send: '6'
        - expect: 'BST(.*?)contains(.*?)digit(.*?)6(.*?)true(\s+)'
        - expect: 'Choose(.*?)an(.*?)operation(.*?)for(.*?)Binary(.*?)Search(.*?)Tree(.*?)BST(.*?)(\s+)'
        - expect: 'A(.*?)Insert(.*?)a(.*?)number(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'B(.*?)Read(.*?)numbers(.*?)from(.*?)a(.*?)file(.*?)and(.*?)add(.*?)them(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'C(.*?)Test(.*?)whether(.*?)the(.*?)BST(.*?)contains(.*?)a(.*?)number(\s+)'
        - expect: 'P(.*?)Print(.*?)the(.*?)node(.*?)structure(.*?)in(.*?)the(.*?)BST(.*?)with(.*?)PostOrder(.*?)search(\s+)'
        - expect: 'M(.*?)Find(.*?)the(.*?)BST(.*?)within(.*?)a(.*?)binary(.*?)tree(.*?)with(.*?)maximum(.*?)sum(.*?)value(\s+)'
        - expect: 'E(.*?)Exit(\s+)'
        - send: 'E'
        - expect: _EOF_ 
    exit: 0
    points: 2

- case3:
    run: ./bin/recitation4 cases/input_cor.txt
    script:
        - expect: 'Enter a choice: {A,B,P,M,E}: '
        - send: 'M'
        - expect: 'Sub(.*?)BST(.*?)with(.*?)Maximum(.*?)Sum(.*?) 20(\s+)'
        - expect: 'Choose(.*?)an(.*?)operation(.*?)for(.*?)Binary(.*?)Search(.*?)Tree(.*?)BST(.*?)(\s+)'
        - expect: 'A(.*?)Insert(.*?)a(.*?)number(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'B(.*?)Read(.*?)numbers(.*?)from(.*?)a(.*?)file(.*?)and(.*?)add(.*?)them(.*?)to(.*?)the(.*?)BST(\s+)'
        - expect: 'C(.*?)Test(.*?)whether(.*?)the(.*?)BST(.*?)contains(.*?)a(.*?)number(\s+)'
        - expect: 'P(.*?)Print(.*?)the(.*?)node(.*?)structure(.*?)in(.*?)the(.*?)BST(.*?)with(.*?)PostOrder(.*?)search(\s+)'
        - expect: 'M(.*?)Find(.*?)the(.*?)BST(.*?)within(.*?)a(.*?)binary(.*?)tree(.*?)with(.*?)maximum(.*?)sum(.*?)value(\s+)'
        - expect: 'E(.*?)Exit(\s+)'
        - send: 'E'
        - expect: _EOF_ 
    exit: 0
    points: 2